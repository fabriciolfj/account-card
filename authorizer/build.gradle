plugins {
	id 'org.springframework.boot' version '2.1.13.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id 'checkstyle'
	id 'jacoco'
}

group = 'br.com.account-card'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	mavenLocal()
}

ext {
	set('springCloudVersion', "Greenwich.SR5")
	set('domainVersion', '0.0.1-LOCAL')
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-amqp'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.cloud:spring-cloud-stream'
	implementation 'org.springframework.cloud:spring-cloud-stream-binder-rabbit'
	implementation 'org.springframework.cloud:spring-cloud-starter-oauth2'
	implementation 'org.flywaydb:flyway-core'

	implementation(group: 'account', name: 'authorizer-domain', version: domainVersion)
	implementation 'io.springfox:springfox-swagger2:2.9.2'
	implementation 'io.springfox:springfox-swagger-ui:2.9.2'

	runtimeOnly 'mysql:mysql-connector-java'

	compile group: 'org.modelmapper', name: 'modelmapper', version: '2.3.7'
	compile group: 'br.com.caelum.stella', name: 'caelum-stella-core', version: '2.1.3'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.amqp:spring-rabbit-test'
	testImplementation 'org.springframework.cloud:spring-cloud-stream-test-support'
	testImplementation 'org.springframework.security:spring-security-test'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}


/*****************************************************************************
 * Configuration
 *****************************************************************************/
tasks.withType(Checkstyle) {
	configFile = file("$project.projectDir/settings/code-analyzer/checkstyle.xml")
	checkstyleMain {
		source = sourceSets.main.allSource
	}
	configurations {
		checkstyle
	}
	reports {
		xml.enabled = false
	}
}

/*****************************************************************************
 * JaCoCo
 *****************************************************************************/
jacoco {
	toolVersion = '0.8.4'
	applyTo(tasks.withType(JavaExec))
}

ext {
	coverageLimits = [
			'instruction': 20.00,
			'branch'     : 0,
			'line'       : 20.00,
			'complexity' : 20.00,
			'method'     : 20.00,
			'class'      : 20.00,
	]
}

jacocoTestReport {
	reports {
		html.enabled = true
		xml.enabled = true
		csv.enabled = false
	}

	afterEvaluate {
		classDirectories.from = files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [])
		})
	}

	doLast {
		def report = file("${jacoco.reportsDir}/test/jacocoTestReport.xml")
		logger.lifecycle("Checking coverage results: $report")

		def parser = new XmlParser()
		parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
		parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
		def results = parser.parse(report)

		def percentage = {
			def covered = it.'@covered' as Double
			def missed = it.'@missed' as Double
			((covered / (covered + missed)) * 100).round(2)
		}

		def counters = results.counter
		def metrics = [:]
		metrics << [
				'instruction': percentage(counters.find { it.'@type'.equals('INSTRUCTION') }),
				'branch'     : percentage(counters.find { it.'@type'.equals('BRANCH') }),
				'line'       : percentage(counters.find { it.'@type'.equals('LINE') }),
				'complexity' : percentage(counters.find { it.'@type'.equals('COMPLEXITY') }),
				'method'     : percentage(counters.find { it.'@type'.equals('METHOD') }),
				'class'      : percentage(counters.find { it.'@type'.equals('CLASS') })
		]

		def failures = []
		logger.quiet("------------------ Current Code Coverage -----------------------")
		metrics.each {
			def limit = coverageLimits[it.key]
			logger.quiet("${it.key} : ${it.value}")
			if (it.value < limit) {
				failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is $limit%")
			}
		}
		logger.quiet("---------------------------------------------------------------")

		if (failures) {
			logger.quiet("------------------ Code Coverage Failed -----------------------")
			failures.each {
				logger.quiet(it)
			}
			logger.quiet("---------------------------------------------------------------")
			throw new GradleException("Code coverage failed")
		} else {
			logger.quiet("Passed Code Coverage Checks")
		}
	}
}

test.finalizedBy jacocoTestReport

project.ext.exclusions = [
		'**/*Config*',
		'**/*Parameters*',
		'**/*Constants*',
		'**/*Enum*',
		'**/CustomAPIHealthCheck.java',
		'**/ApiExceptionHandler.java',
		'**/generated-classes/*',
		'**/*DTO.java*',
		'**/*Request.java*',
		'**/*Response.java*'
]